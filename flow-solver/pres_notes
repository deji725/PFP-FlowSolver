

(naive parent)
strategy of parallelizing EVERYTHING:
    - 2:49s (seq) -> 2:06 -> 1.34
    - GC and Fizzled sparks ~70 million
    - Spread is excellent



lookahead (equity) (practical parent)
strategy of checking possible moves of children:
    - performes deterministically
    - real    0m49.213s for parallel (doesnt improve with greater spark creation after a certain point)
    - real   1m51.303s for sequential 
    - speedup of 2.27
    - overhead for computing possible next moves for children which you
      eventually do again on the recursive call
        - maybe can be eliminated (future work)
    - two versions - one with possible total moves and one with number of
      moves on shortest move
    - more potential
    - more complicated version that is closer to the 3rd one
    - if our prospect turns out to not need all the power it was given, then we
      wasted everything we have on them and the other children got nothing even
      though they needed it more in practice

inheritance (equality) (stricly fair parent)
strategy of dividing parallelizing ability to children equally:
    - 1:49 -> 0:43 -> 2.53
    - 2:31 for parallel, 1:51 for sequential
    - floor(depth/(len_of_subproblems - 1))
    - spread our chances equally among the children, so if any of them fails
      quickly, we don't lose a lot
    - one of them desperately needs it a lot more than others, then becomes
      sequential
